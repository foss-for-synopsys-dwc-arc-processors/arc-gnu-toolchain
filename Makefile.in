srcdir := @abs_top_srcdir@
builddir := @abs_top_builddir@
INSTALL_DIR := @prefix@

PACKAGES :=

DISTDIR ?= /var/cache/distfiles
GNU_MIRROR := http://mirrors.kernel.org/gnu
gcc_url := $(GNU_MIRROR)/gcc/gcc-$(gcc_version)/gcc-$(gcc_version).tar.gz
newlib_url := ftp://sourceware.org/pub/newlib/newlib-$(newlib_version).tar.gz

# SNPS toolchains
SNPS_GIT_URL    	:= https://github.com/foss-for-synopsys-dwc-arc-processors
BINUTILS_BRANCH 	:= arc64
GCC_BRANCH      	:= arc64
NEWLIB_BRANCH   	:= arc64
QEMU_BRANCH     	:= master
GLIBC_BRANCH    	:= arc64
BUILDROOT_BRANCH	:= arc64
LINUX_BRANCH 		:= arc64

-include build.config

BINUTILS_SRCDIR		:= $(srcdir)/binutils-gdb
NEWLIB_SRCDIR		:= $(srcdir)/newlib
GCC_SRCDIR		:= $(srcdir)/gcc
GLIBC_SRCDIR		:= $(srcdir)/glibc
LINUX_SRCDIR		:= $(srcdir)/linux
QEMU_SRCDIR		:= $(srcdir)/qemu

SYSROOT := $(INSTALL_DIR)/sysroot

SIM ?= @with_sim@

SHELL := /bin/sh
AWK := @GAWK@
SED := @GSED@
PATH := $(INSTALL_DIR)/bin:$(PATH)

# Check to see if we need wrapper scripts for awk/sed (which point to
# gawk/gsed on platforms where these aren't the default), otherwise
# don't override these as the wrappers don't always work.
ORIGINAL_PATH := $(PATH)
ifneq (@GSED@,/bin/sed)
	PATH := $(base_dir)/sed:$(PATH)
endif
ifneq (@GAWK@,/usr/bin/gawk)
	PATH := $(base_dir)/awk:$(PATH)
endif

export PATH AWK SED

MULTILIB_FLAGS := @multilib_flags@
GCC_CHECKING_FLAGS := @gcc_checking@

GITVER := $(shell git --git-dir=$(GCC_SRCDIR)/.git describe --tag --always)
PKGVER := "ARCv3 ARC64 GNU/Linux $(GITVER)"

make_tuple = @target_alias@-$(1)
LINUX_TUPLE  ?= $(call make_tuple,linux-gnu)
LINUX_HEADERS_SRCDIR := @with_linux_headers_src@

ifeq (@target_alias@,arc)
NEWLIB_TUPLE ?= $(call make_tuple,elf32)
WITH_CPU ?= @with_cpu@
else
NEWLIB_TUPLE ?= $(call make_tuple,elf)
WITH_CPU ?=
endif

ROOT_DIR := $(shell pwd)

CFLAGS_FOR_TARGET := $(CFLAGS_FOR_TARGET_EXTRA) @target_cflags@ @cmodel@
CXXFLAGS_FOR_TARGET := $(CXXFLAGS_FOR_TARGET_EXTRA) @target_cxxflags@ @cmodel@
ASFLAGS_FOR_TARGET := $(ASFLAGS_FOR_TARGET_EXTRA) @cmodel@
# --with-expat is required to enable XML support used by OpenOCD.
BINUTILS_TARGET_FLAGS := --with-expat=yes $(BINUTILS_TARGET_FLAGS_EXTRA)
BINUTILS_NATIVE_FLAGS := $(BINUTILS_NATIVE_FLAGS_EXTRA)
GDB_TARGET_FLAGS := --with-expat=yes $(GDB_TARGET_FLAGS_EXTRA)
GDB_NATIVE_FLAGS := $(GDB_NATIVE_FLAGS_EXTRA)

GLIBC_TARGET_FLAGS := $(GLIBC_TARGET_FLAGS_EXTRA)
GLIBC_CC_FOR_TARGET ?= $(LINUX_TUPLE)-gcc
GLIBC_CXX_FOR_TARGET ?= $(LINUX_TUPLE)-g++
GLIBC_TARGET_BOARDS ?= arc-sim

NEWLIB_CC_FOR_TARGET ?= $(NEWLIB_TUPLE)-gcc
NEWLIB_CXX_FOR_TARGET ?= $(NEWLIB_TUPLE)-g++
NEWLIB_TARGET_BOARDS ?= arc-sim

# QEMU sim setup for running the tests
ifeq (@target_alias@,arc)
	QEMU_CPU = archs
else
ifeq (@target_alias@,arc32)
	QEMU_CPU = hs5x
else
	QEMU_CPU = hs6x
endif
endif

ifeq ($(SIM),qemu)
	# Using qemu simulator.
	SIM_STAMP:= stamps/build-qemu
else
ifeq ($(SIM),nsim)
	# Using nsim simulator.
	ifeq (@default_target@, linux)
		$(error nSIM not supported)
	endif
	SIM_STAMP:= nsim-validation
else
	$(error Only support SIM=nsim, or SIM=qemu (default))
endif
endif

SIM_PATH:=$(srcdir)/scripts/wrapper/$(SIM)
SIM_PREPARE:=PATH="$(SIM_PATH):$(INSTALL_DIR)/bin:$(PATH)" ARC_SYSROOT="$(SYSROOT)" DEJAGNU="$(srcdir)/dejagnu/site.exp" QEMU_CPU="$(QEMU_CPU)"


all: @default_target@ @qemu_build@
	echo "$(INSTALL_DIR)" > stamps/install_dir
newlib: stamps/build-gcc-newlib-stage2
linux: stamps/build-gdbserver-linux

gdbserver: stamps/build-gdbserver-linux
qemu: stamps/build-qemu

REGRESSION_TEST_LIST = gcc binutils newlib

.PHONY: check
check: check-@default_target@
.PHONY: check-linux check-newlib
check-linux: $(patsubst %,check-%-linux,$(REGRESSION_TEST_LIST))
check-newlib: $(patsubst %,check-%-newlib,$(REGRESSION_TEST_LIST))

check-gcc: check-gcc-@default_target@
check-gcc-newlib: stamps/check-gcc-newlib
check-gcc-linux: stamps/check-gcc-linux

check-binutils: check-binutils-@default_target@
check-binutils-linux: stamps/check-binutils-linux
check-binutils-newlib: stamps/check-binutils-newlib

check-newlib-newlib:stamps/check-newlib-newlib

.PHONY: report
report: report-@default_target@

report-linux: $(patsubst %,report-%-linux,$(REGRESSION_TEST_LIST))
report-newlib: $(patsubst %,report-%-newlib,$(REGRESSION_TEST_LIST))

.PHONY: report-newlib-@default_target@ report-binutils-@default_target@
report-gcc: report-gcc-@default_target@
report-binutils: report-binutils-@default_target@
report-newlib: report-newlib-@default_target@

$(addprefix src/original-,$(PACKAGES)):
	mkdir -p src
	rm -rf $@ $(subst original-,,$@)-*
	cd src && (cat $(DISTDIR)/$(subst src/original-,,$@)-$($(subst src/original-,,$@)_version).tar.gz || @FETCHER@ $($(subst src/original-,,$@)_url)) | tar zxf -
	mv $(subst original-,,$@)-$($(subst src/original-,,$@)_version) $@

$(addprefix src/,$(PACKAGES)): src/%: src/original-%
	rm -rf $@ $@.tmp
	cp -a $< $@.tmp
	$(srcdir)/scripts/cp_s $(srcdir)/$(notdir $@) $@.tmp
	cd $@.tmp && patch -p1 < $(srcdir)/patches/$(notdir $@)
	if test -f $@.tmp/contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" == "true"; then cd $@.tmp && ./contrib/download_prerequisites; fi
	mv $@.tmp $@

.PHONY: patches $(addprefix $(srcdir)/patches/,$(PACKAGES))
$(addprefix $(srcdir)/patches/,$(PACKAGES)): $(srcdir)/patches/%: src/%
	-cd src/$(notdir $@) && rm `cd $(srcdir)/$(notdir $@) && find . -type f`
	-cd src && diff --exclude=manual --exclude=autom4te.cache -rupN original-$(notdir $@) $(notdir $@) | filterdiff --remove-timestamps > $@
	$(srcdir)/scripts/cp_s $(srcdir)/$(notdir $@) $<

patches: $(addprefix $(srcdir)/patches/,$(PACKAGES))

$(BINUTILS_SRCDIR):
	git clone --depth 1 --single-branch --branch $(BINUTILS_BRANCH) $(SNPS_GIT_URL)/binutils-gdb.git $@

$(GCC_SRCDIR):
	git clone --depth 1 --single-branch --branch $(GCC_BRANCH) $(SNPS_GIT_URL)/gcc.git $@

$(NEWLIB_SRCDIR):
	git clone --depth 1 --single-branch --branch $(NEWLIB_BRANCH) $(SNPS_GIT_URL)/newlib.git $@

$(GLIBC_SRCDIR):
	git clone --depth 1 --single-branch --branch $(GLIBC_BRANCH) $(SNPS_GIT_URL)/glibc.git $@

$(QEMU_SRCDIR):
	git clone --depth 1 --single-branch --branch $(QEMU_BRANCH) $(SNPS_GIT_URL)/qemu.git $@

$(LINUX_SRCDIR):
	git clone --depth 1 --single-branch --branch $(LINUX_BRANCH) $(SNPS_GIT_URL)/linux.git $@

stamps/check-write-permission:
	mkdir -p $(INSTALL_DIR)/.test || \
		(echo "Sorry, you don't have permission to write to" \
		 "'$(INSTALL_DIR)', use --prefix to specify" \
		 "another path, or use 'sudo make' if you *REALLY* want to" \
		 "install into '$(INSTALL_DIR)'" && exit 1)
	rm -r $(INSTALL_DIR)/.test
	mkdir -p $(dir $@) && touch $@

stamps/build-linux-headers:
	mkdir -p $(SYSROOT)/usr/
ifdef LINUX_HEADERS_SRCDIR
	cp -a $(LINUX_HEADERS_SRCDIR) $(SYSROOT)/usr/
else
	cp -a $(srcdir)/linux-headers/include $(SYSROOT)/usr/
endif
	mkdir -p $(dir $@) && touch $@


#
# GLIBC
#

stamps/build-binutils-linux: $(BINUTILS_SRCDIR) stamps/check-write-permission
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
# CC_FOR_TARGET is required for the ld testsuite.
	cd $(notdir $@) && CC_FOR_TARGET=$(GLIBC_CC_FOR_TARGET) $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		$(MULTILIB_FLAGS) \
		--disable-werror \
		--disable-nls \
		$(BINUTILS_TARGET_FLAGS) \
		--disable-sim \
		CFLAGS="-g3"
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-glibc-linux-headers: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && CC="$(GLIBC_CC_FOR_TARGET)" $</configure \
		--host=$(LINUX_TUPLE) \
		--prefix=$(SYSROOT)/usr \
		--enable-shared \
		--with-headers=$(LINUX_HEADERS_SRCDIR) \
		--disable-multilib \
		--enable-kernel=3.0.0
	$(MAKE) -C $(notdir $@) install-headers
	mkdir -p $(dir $@) && touch $@

stamps/build-glibc-linux: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
	$(eval $@_ARCH := )
	$(eval $@_ABI := )
	$(eval $@_LIBDIRSUFFIX := $(if $($@_ABI),$(shell echo $($@_ARCH) | sed 's/.*rv\([0-9]*\).*/\1/')/$($@_ABI),))
	$(eval $@_LIBDIROPTS := $(if $@_LIBDIRSUFFIX,--libdir=/usr/lib$($@_LIBDIRSUFFIX) libc_cv_slibdir=/lib$($@_LIBDIRSUFFIX) libc_cv_rtlddir=/lib,))
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && \
		CC="$(GLIBC_CC_FOR_TARGET) $($@_CFLAGS)" \
		CXX="$(GLIBC_CXX_FOR_TARGET) $($@_CFLAGS)" \
		CFLAGS="$(CFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
		CXXFLAGS="$(CXXFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
		ASFLAGS="$(ASFLAGS_FOR_TARGET) $($@_CFLAGS)" \
		$</configure \
		--host=${LINUX_TUPLE} \
		--prefix=/usr \
		--disable-werror \
		--enable-shared \
		--enable-obsolete-rpc \
		--with-headers=$(LINUX_HEADERS_SRCDIR) \
		$(MULTILIB_FLAGS) \
		$(GLIBC_TARGET_FLAGS) \
		$($@_LIBDIROPTS) \
		CFLAGS="-O2 -g3"
	$(MAKE) -C $(notdir $@)
	+flock $(SYSROOT)/.lock $(MAKE) -C $(notdir $@) install install_root=$(SYSROOT)
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-linux-stage1: $(GCC_SRCDIR) stamps/build-binutils-linux \
                               stamps/build-linux-headers
	if test -f $</contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" = "true"; then cd $< && ./contrib/download_prerequisites; fi
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		--with-newlib \
		--without-headers \
		--disable-shared \
		--disable-threads \
		@with_system_zlib@ \
		--enable-tls \
		--enable-languages=c \
		--disable-libatomic \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		--disable-bootstrap \
		--disable-lto \
		$(WITH_CPU) \
		@with_fpu@ \
		$(GCC_CHECKING_FLAGS) \
		$(MULTILIB_FLAGS) \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)" \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@) inhibit-libc=true all-gcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true install-gcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true all-target-libgcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true install-target-libgcc
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-linux-stage2: $(GCC_SRCDIR) stamps/build-glibc-linux \
                               stamps/build-glibc-linux-headers
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		--with-pkgversion=$(PKGVER) \
		@with_system_zlib@ \
		--enable-shared \
		--enable-tls \
		--enable-languages=c,c++,fortran \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-nls \
		--disable-bootstrap \
		$(WITH_CPU) \
		@with_fpu@ \
		$(GCC_CHECKING_FLAGS) \
		$(MULTILIB_FLAGS) \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)" \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	cp -a $(INSTALL_DIR)/$(LINUX_TUPLE)/lib* $(SYSROOT)
	mkdir -p $(dir $@) && touch $@

stamps/build-gdbserver-linux: $(BINUTILS_SRCDIR) stamps/build-gcc-linux-stage2
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure                  \
		--host=$(LINUX_TUPLE)                        \
		--prefix=/usr                                \
		--disable-gdb                                \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
	$(MAKE) -C $(notdir $@) all-gdbserver
	$(MAKE) -C $(notdir $@) install-gdbserver DESTDIR=$(SYSROOT)
	mkdir -p $(dir $@) && touch $@

stamps/build-buildroot-linux: $(BUILDROOT_SRCDIR) $(LINUX_SRCDIR) #stamps/build-gcc-linux-stage2
	export PATH=$(ORIGINAL_PATH)
	unset AWK SED
	rm -rf $@ $(notdir $@)
	cd ${ROOT_DIR} && tar cfz /tmp/arc-linux.tar.gz arc-linux
	$(SED) 's.%INSTALL_DIR%.$(INSTALL_DIR).' scripts/buildroot_defconfig > /tmp/buildroot_defconfig
	$(SED) -i 's.%LINUX_SRCDIR%.$(LINUX_SRCDIR).' /tmp/buildroot_defconfig
	cd ${BUILDROOT_SRCDIR} && make defconfig BR2_DEFCONFIG=/tmp/buildroot_defconfig O=${ROOT_DIR}/$(notdir $@)
	@echo ""
	@echo " ========= IMPORTANT NOTICE ============"
	@echo "Buildroot is setup complete. Further continue by going to $(notdir $@) and executing make."
	@echo ""
	mkdir -p $(dir $@) && touch $@

#
# NEWLIB
#

stamps/build-binutils-newlib: $(BINUTILS_SRCDIR)
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(NEWLIB_TUPLE) \
		--prefix=$(INSTALL_DIR) \
		--disable-python \
		@multilib_flags@ \
		@werror_flag@ \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-newlib-stage1: $(GCC_SRCDIR) stamps/build-binutils-newlib
	if test -f $</contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" == "true"; then cd $< && ./contrib/download_prerequisites; fi
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(NEWLIB_TUPLE) \
		@configure_host@ \
		--prefix=$(INSTALL_DIR) \
		--disable-shared \
		--disable-threads \
		--disable-tls \
		--enable-languages=c \
		@with_system_zlib@ \
		--with-newlib \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		@gcc_checking@ \
		@werror_flag@ \
		$(WITH_CPU) \
		@with_fpu@ \
		--with-gnu-as \
		--with-gnu-ld \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
	$(MAKE) -C $(notdir $@) all-gcc
	$(MAKE) -C $(notdir $@) install-gcc
	mkdir -p $(dir $@) && touch $@

stamps/build-newlib: $(NEWLIB_SRCDIR) stamps/build-gcc-newlib-stage1
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(NEWLIB_TUPLE) \
		--enable-newlib-io-c99-formats \
		@configure_host@ \
		@multilib_flags@ \
		--prefix=$(INSTALL_DIR) \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-newlib-stage2: $(GCC_SRCDIR) stamps/build-newlib
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(NEWLIB_TUPLE) \
		@configure_host@ \
		--prefix=$(INSTALL_DIR) \
		--disable-shared \
		--disable-threads \
		--enable-languages=c,c++ \
		@with_system_zlib@ \
		--disable-tls \
		--with-newlib \
		--with-headers=$(INSTALL_DIR)/$(NEWLIB_TUPLE)/include \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		@gcc_checking@ \
		@multilib_flags@ \
		@werror_flag@ \
		$(WITH_CPU) \
		@with_fpu@ \
		--with-gnu-as \
		--with-gnu-ld \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-qemu: $(QEMU_SRCDIR)
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--prefix=${INSTALL_DIR} \
		--target-list="arc-softmmu,arc64-softmmu,arc-linux-user,arc64-linux-user" \
		--enable-debug \
		--enable-debug-tcg
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/check-gcc-linux: stamps/build-gcc-linux-stage2 $(SIM_STAMP)
	$(SIM_PREPARE) $(MAKE) -C build-gcc-linux-stage2 check-gcc "RUNTESTFLAGS=$(RUNTESTFLAGS) --target_board='$(GLIBC_TARGET_BOARDS)'"
	mkdir -p $(dir $@)
	date > $@

stamps/check-gcc-newlib: stamps/build-gcc-newlib-stage2 $(SIM_STAMP)
	$(SIM_PREPARE) $(MAKE) -C build-gcc-newlib-stage2 check-gcc "RUNTESTFLAGS=$(RUNTESTFLAGS) --target_board='$(NEWLIB_TARGET_BOARDS)'"
	mkdir -p $(dir $@)
	date > $@

stamps/check-binutils-newlib: stamps/build-gcc-newlib-stage2 $(SIM_STAMP)
	$(SIM_PREPARE) $(MAKE) -C build-binutils-newlib check-binutils check-gas check-ld -k "RUNTESTFLAGS=--target_board='$(NEWLIB_TARGET_BOARDS)'" || true
	date > $@

stamps/check-binutils-linux: stamps/build-gcc-linux-stage2 $(SIM_STAMP)
	$(SIM_PREPARE) $(MAKE) -C build-binutils-linux check-binutils check-gas check-ld -k "RUNTESTFLAGS=--target_board='$(GLIBC_TARGET_BOARDS)'" || true
	date > $@

stamps/check-newlib-newlib: stamps/build-newlib $(SIM_STAMP)
	$(SIM_PREPARE) $(MAKE) -C build-newlib check -k "RUNTESTFLAGS=--target_board='$(NEWLIB_TARGET_BOARDS)'" || true
	date > $@

nsim-validation:
ifeq ($(shell command -v nsimdrv),)
	$(error nsimdrv not detected)
endif

report-gcc-newlib: stamps/check-gcc-newlib
	$(srcdir)/scripts/testsuite-filter newlib \
		$(srcdir)/test/allowlist/gcc/$(QEMU_CPU)/gcc.json \
		`find build-gcc-newlib-stage2 -name *.sum |paste -sd "," -`

report-gcc-linux: stamps/check-gcc-linux
	$(srcdir)/scripts/testsuite-filter linux \
		$(srcdir)/test/allowlist/gcc/$(QEMU_CPU)/gcc.json \
		`find build-gcc-linux-stage2 -name *.sum |paste -sd "," -`

report-binutils-newlib: stamps/check-binutils-newlib
	$(srcdir)/scripts/testsuite-filter newlib \
		$(srcdir)/test/allowlist/binutils/binutils.json \
		`find build-binutils-newlib -name *.sum |paste -sd "," -`

report-binutils-linux: stamps/check-binutils-linux
	$(srcdir)/scripts/testsuite-filter linux \
		$(srcdir)/test/allowlist/binutils/binutils.json \
		`find build-binutils-linux -name *.sum |paste -sd "," -`

clean:
	rm -rf build-* $(addprefix src/,$(PACKAGES)) stamps autom4te.cache

distclean: clean
	rm -rf src

# All of the packages install themselves, so our install target does nothing.
install:
