srcdir := @abs_top_srcdir@
builddir := @abs_top_builddir@
INSTALL_DIR := @prefix@

PACKAGES :=

DISTDIR ?= /var/cache/distfiles
GNU_MIRROR := http://mirrors.kernel.org/gnu
gcc_url := $(GNU_MIRROR)/gcc/gcc-$(gcc_version)/gcc-$(gcc_version).tar.gz
newlib_url := ftp://sourceware.org/pub/newlib/newlib-$(newlib_version).tar.gz

# SNPS toolchains
SNPS_GIT_URL    	:= https://github.com/foss-for-synopsys-dwc-arc-processors
BINUTILS_BRANCH 	:= arc64
GCC_BRANCH      	:= arc64
NEWLIB_BRANCH   	:= arc64
QEMU_BRANCH     	:= master
GLIBC_BRANCH    	:= arc64
BUILDROOT_BRANCH	:= arc64
LINUX_BRANCH 		:= arc64

BINUTILS_SRCDIR		:= $(srcdir)/arc-binutils-gdb
GCC_SRCDIR		:= $(srcdir)/arc-gcc
GLIBC_SRCDIR		:= $(srcdir)/arc-glibc
BUILDROOT_SRCDIR	:= $(srcdir)/arc-buildroot
LINUX_SRCDIR		:= $(srcdir)/arc-linux

SYSROOT := $(INSTALL_DIR)/sysroot

SHELL := /bin/sh
AWK := @GAWK@
SED := @GSED@
PATH := $(INSTALL_DIR)/bin:$(PATH)

# Check to see if we need wrapper scripts for awk/sed (which point to
# gawk/gsed on platforms where these aren't the default), otherwise
# don't override these as the wrappers don't always work.
ORIGINAL_PATH := $(PATH)
ifneq (@GSED@,/bin/sed)
	PATH := $(base_dir)/sed:$(PATH)
endif
ifneq (@GAWK@,/usr/bin/gawk)
	PATH := $(base_dir)/awk:$(PATH)
endif

export PATH AWK SED

MULTILIB_FLAGS := @multilib_flags@
GCC_CHECKING_FLAGS := @gcc_checking@

XLEN := $(shell echo $(WITH_ARCH) | tr A-Z a-z | sed 's/.*rv\([0-9]*\).*/\1/')
ifneq ($(XLEN),32)
		XLEN := 64
	endif

GITVER := $(shell git --git-dir=$(GCC_SRCDIR)/.git describe --tag --always)
PKGVER := "ARCv3 ARC64 GNU/Linux $(GITVER)"
make_tuple = arc64-unknown-$(1)
LINUX_TUPLE  ?= arc64-linux-gnu
NEWLIB_TUPLE ?= $(call make_tuple,elf)
MUSL_TUPLE ?= $(call make_tuple,linux-musl)
LINUX_HEADERS_SRCDIR := @with_linux_headers_src@

ROOT_DIR := $(shell pwd)

CFLAGS_FOR_TARGET := $(CFLAGS_FOR_TARGET_EXTRA) @target_cflags@ @cmodel@
CXXFLAGS_FOR_TARGET := $(CXXFLAGS_FOR_TARGET_EXTRA) @target_cxxflags@ @cmodel@
ASFLAGS_FOR_TARGET := $(ASFLAGS_FOR_TARGET_EXTRA) @cmodel@
# --with-expat is required to enable XML support used by OpenOCD.
BINUTILS_TARGET_FLAGS := --with-expat=yes $(BINUTILS_TARGET_FLAGS_EXTRA)
BINUTILS_NATIVE_FLAGS := $(BINUTILS_NATIVE_FLAGS_EXTRA)
GDB_TARGET_FLAGS := --with-expat=yes $(GDB_TARGET_FLAGS_EXTRA)
GDB_NATIVE_FLAGS := $(GDB_NATIVE_FLAGS_EXTRA)

GLIBC_TARGET_FLAGS := $(GLIBC_TARGET_FLAGS_EXTRA)
GLIBC_CC_FOR_TARGET ?= $(LINUX_TUPLE)-gcc
GLIBC_CXX_FOR_TARGET ?= $(LINUX_TUPLE)-g++

NEWLIB_CC_FOR_TARGET ?= $(NEWLIB_TUPLE)-gcc
NEWLIB_CXX_FOR_TARGET ?= $(NEWLIB_TUPLE)-g++

MUSL_TARGET_FLAGS := $(MUSL_TARGET_FLAGS_EXTRA)
MUSL_CC_FOR_TARGET ?= $(MUSL_TUPLE)-gcc
MUSL_CXX_FOR_TARGET ?= $(MUSL_TUPLE)-g++

CFLAGS_FOR_TARGET := $(CFLAGS_FOR_TARGET_EXTRA)
ASFLAGS_FOR_TARGET := $(ASFLAGS_FOR_TARGET_EXTRA)

all: @default_target@ @qemu_build@
	echo "$(INSTALL_DIR)" > stamps/install_dir
newlib: stamps/build-gcc-newlib-stage2
linux: stamps/build-gcc-linux-stage2
qemu: stamps/build-qemu

$(addprefix src/original-,$(PACKAGES)):
	mkdir -p src
	rm -rf $@ $(subst original-,,$@)-*
	cd src && (cat $(DISTDIR)/$(subst src/original-,,$@)-$($(subst src/original-,,$@)_version).tar.gz || @FETCHER@ $($(subst src/original-,,$@)_url)) | tar zxf -
	mv $(subst original-,,$@)-$($(subst src/original-,,$@)_version) $@

$(addprefix src/,$(PACKAGES)): src/%: src/original-%
	rm -rf $@ $@.tmp
	cp -a $< $@.tmp
	$(srcdir)/scripts/cp_s $(srcdir)/$(notdir $@) $@.tmp
	cd $@.tmp && patch -p1 < $(srcdir)/patches/$(notdir $@)
	if test -f $@.tmp/contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" == "true"; then cd $@.tmp && ./contrib/download_prerequisites; fi
	mv $@.tmp $@

.PHONY: patches $(addprefix $(srcdir)/patches/,$(PACKAGES))
$(addprefix $(srcdir)/patches/,$(PACKAGES)): $(srcdir)/patches/%: src/%
	-cd src/$(notdir $@) && rm `cd $(srcdir)/$(notdir $@) && find . -type f`
	-cd src && diff --exclude=manual --exclude=autom4te.cache -rupN original-$(notdir $@) $(notdir $@) | filterdiff --remove-timestamps > $@
	$(srcdir)/scripts/cp_s $(srcdir)/$(notdir $@) $<

patches: $(addprefix $(srcdir)/patches/,$(PACKAGES))

$(srcdir)/arc-binutils-gdb:
	git clone --depth 1 --single-branch --branch $(BINUTILS_BRANCH) $(SNPS_GIT_URL)/binutils-gdb.git $@

$(srcdir)/arc-gcc:
	git clone --depth 1 --single-branch --branch $(GCC_BRANCH) $(SNPS_GIT_URL)/gcc.git $@

$(srcdir)/arc-newlib:
	git clone --depth 1 --single-branch --branch $(NEWLIB_BRANCH) $(SNPS_GIT_URL)/newlib.git $@

$(srcdir)/arc-glibc:
	git clone --depth 1 --single-branch --branch $(GLIBC_BRANCH) $(SNPS_GIT_URL)/glibc.git $@

$(srcdir)/arc-qemu:
	git clone --depth 1 --single-branch --branch $(QEMU_BRANCH) $(SNPS_GIT_URL)/qemu.git $@

$(srcdir)/arc-buildroot:
	git clone --depth 1 --single-branch --branch $(BUILDROOT_BRANCH) $(SNPS_GIT_URL)/buildroot.git $@

$(srcdir)/arc-linux:
	git clone --depth 1 --single-branch --branch $(LINUX_BRANCH) $(SNPS_GIT_URL)/linux.git $@

stamps/check-write-permission:
	mkdir -p $(INSTALL_DIR)/.test || \
		(echo "Sorry, you don't have permission to write to" \
		 "'$(INSTALL_DIR)', use --prefix to specify" \
		 "another path, or use 'sudo make' if you *REALLY* want to" \
		 "install into '$(INSTALL_DIR)'" && exit 1)
	rm -r $(INSTALL_DIR)/.test
	mkdir -p $(dir $@) && touch $@

stamps/build-linux-headers:
	mkdir -p $(SYSROOT)/usr/
ifdef LINUX_HEADERS_SRCDIR
	cp -a $(LINUX_HEADERS_SRCDIR) $(SYSROOT)/usr/
else
	cp -a $(srcdir)/linux-headers/include $(SYSROOT)/usr/
endif
	mkdir -p $(dir $@) && touch $@


#
# GLIBC
#

stamps/build-binutils-linux: $(BINUTILS_SRCDIR) stamps/check-write-permission
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
# CC_FOR_TARGET is required for the ld testsuite.
	cd $(notdir $@) && CC_FOR_TARGET=$(GLIBC_CC_FOR_TARGET) $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		$(MULTILIB_FLAGS) \
		--disable-werror \
		--disable-nls \
		$(BINUTILS_TARGET_FLAGS) \
		--disable-gdb \
		--disable-sim \
		--disable-libdecnumber \
		--disable-readline \
		CFLAGS="-g3"
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-gdb-linux: $(GDB_SRCDIR)
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
# CC_FOR_TARGET is required for the ld testsuite.
	cd $(notdir $@) && CC_FOR_TARGET=$(GLIBC_CC_FOR_TARGET) $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		$(MULTILIB_FLAGS) \
		--disable-werror \
		--disable-nls \
		$(GDB_TARGET_FLAGS) \
		--enable-gdb \
		--disable-gas \
		--disable-binutils \
		--disable-ld \
		--disable-gold \
		--disable-gprof
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-glibc-linux-headers: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && CC="$(GLIBC_CC_FOR_TARGET)" $</configure \
		--host=$(LINUX_TUPLE) \
		--prefix=$(SYSROOT)/usr \
		--enable-shared \
		--with-headers=$(LINUX_HEADERS_SRCDIR) \
		--disable-multilib \
		--enable-kernel=3.0.0
	$(MAKE) -C $(notdir $@) install-headers
	mkdir -p $(dir $@) && touch $@

stamps/build-glibc-linux: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
	$(eval $@_ARCH := )
	$(eval $@_ABI := )
	$(eval $@_LIBDIRSUFFIX := $(if $($@_ABI),$(shell echo $($@_ARCH) | sed 's/.*rv\([0-9]*\).*/\1/')/$($@_ABI),))
	$(eval $@_XLEN := $(if $($@_ABI),$(shell echo $($@_ARCH) | sed 's/.*rv\([0-9]*\).*/\1/'),$(XLEN)))
	$(eval $@_LIBDIROPTS := $(if $@_LIBDIRSUFFIX,--libdir=/usr/lib$($@_LIBDIRSUFFIX) libc_cv_slibdir=/lib$($@_LIBDIRSUFFIX) libc_cv_rtlddir=/lib,))
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && \
		CC="$(GLIBC_CC_FOR_TARGET) $($@_CFLAGS)" \
		CXX="$(GLIBC_CXX_FOR_TARGET) $($@_CFLAGS)" \
		CFLAGS="$(CFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
		CXXFLAGS="$(CXXFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
		ASFLAGS="$(ASFLAGS_FOR_TARGET) $($@_CFLAGS)" \
		$</configure \
		--host=${LINUX_TUPLE} \
		--prefix=/usr \
		--disable-werror \
		--enable-shared \
		--enable-obsolete-rpc \
		--with-headers=$(LINUX_HEADERS_SRCDIR) \
		$(MULTILIB_FLAGS) \
		$(GLIBC_TARGET_FLAGS) \
		$($@_LIBDIROPTS) \
		CFLAGS="-O2 -g3"
	$(MAKE) -C $(notdir $@)
	+flock $(SYSROOT)/.lock $(MAKE) -C $(notdir $@) install install_root=$(SYSROOT)
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-linux-stage1: $(GCC_SRCDIR) stamps/build-binutils-linux \
                               stamps/build-linux-headers
	if test -f $</contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" = "true"; then cd $< && ./contrib/download_prerequisites; fi
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		--with-newlib \
		--without-headers \
		--disable-shared \
		--disable-threads \
		@with_system_zlib@ \
		--enable-tls \
		--enable-languages=c \
		--disable-libatomic \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		--disable-bootstrap \
		--disable-lto \
		--src=$(gccsrcdir) \
		$(GCC_CHECKING_FLAGS) \
		$(MULTILIB_FLAGS) \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)" \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@) inhibit-libc=true all-gcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true install-gcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true all-target-libgcc
	$(MAKE) -C $(notdir $@) inhibit-libc=true install-target-libgcc
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-linux-stage2: $(GCC_SRCDIR) stamps/build-glibc-linux \
                               stamps/build-glibc-linux-headers
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=$(LINUX_TUPLE) \
		$(CONFIGURE_HOST) \
		--prefix=$(INSTALL_DIR) \
		--with-sysroot=$(SYSROOT) \
		--with-pkgversion=$(PKGVER) \
		@with_system_zlib@ \
		--enable-shared \
		--enable-tls \
		--enable-languages=c,c++,fortran \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-nls \
		--disable-bootstrap \
		--src=$(gccsrcdir) \
		$(GCC_CHECKING_FLAGS) \
		$(MULTILIB_FLAGS) \
		$(WITH_ABI) \
		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)" \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	cp -a $(INSTALL_DIR)/$(LINUX_TUPLE)/lib* $(SYSROOT)
	mkdir -p $(dir $@) && touch $@


stamps/build-buildroot-linux: $(BUILDROOT_SRCDIR) $(LINUX_SRCDIR) #stamps/build-gcc-linux-stage2
	export PATH=$(ORIGINAL_PATH)
	unset AWK SED
	rm -rf $@ $(notdir $@)
	cd ${ROOT_DIR} && tar cfz /tmp/arc-linux.tar.gz arc-linux
	$(SED) 's.%INSTALL_DIR%.$(INSTALL_DIR).' scripts/buildroot_defconfig > /tmp/buildroot_defconfig
	$(SED) -i 's.%LINUX_SRCDIR%.$(LINUX_SRCDIR).' /tmp/buildroot_defconfig
	cd ${BUILDROOT_SRCDIR} && make defconfig BR2_DEFCONFIG=/tmp/buildroot_defconfig O=${ROOT_DIR}/$(notdir $@)
	@echo ""
	@echo " ========= IMPORTANT NOTICE ============"
	@echo "Buildroot is setup complete. Further continue by going to $(notdir $@) and executing make."
	@echo ""
	mkdir -p $(dir $@) && touch $@

#HERE
#stamps/build-binutils-linux: $(BINUTILS_SRCDIR) stamps/check-write-permission
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
## CC_FOR_TARGET is required for the ld testsuite.
#	cd $(notdir $@) && CC_FOR_TARGET=$(GLIBC_CC_FOR_TARGET) $</configure \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR) \
#		--with-sysroot=$(SYSROOT) \
#		$(MULTILIB_FLAGS) \
#		--disable-werror \
#		--disable-nls \
#		$(BINUTILS_TARGET_FLAGS) \
#		--disable-gdb \
#		--disable-sim \
#		--disable-libdecnumber \
#		--disable-readline
#	$(MAKE) -C $(notdir $@)
#	$(MAKE) -C $(notdir $@) install
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-gdb-linux: $(GDB_SRCDIR)
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
## CC_FOR_TARGET is required for the ld testsuite.
#
#
#	cd $(notdir $@) && CC_FOR_TARGET=$(GLIBC_CC_FOR_TARGET) $</configure \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR) \
#		--with-sysroot=$(SYSROOT) \
#		$(MULTILIB_FLAGS) \
#		--disable-werror \
#		--disable-nls \
#		$(GDB_TARGET_FLAGS) \
#		--enable-gdb \
#		--disable-gas \
#		--disable-binutils \
#		--disable-ld \
#		--disable-gold \
#		--disable-gprof
#	$(MAKE) -C $(notdir $@)
#	$(MAKE) -C $(notdir $@) install
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-glibc-linux-headers: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && CC="$(GLIBC_CC_FOR_TARGET)" $</configure \
#		--host=$(LINUX_TUPLE) \
#		--prefix=$(SYSROOT)/usr \
#		--enable-shared \
#		--with-headers=$(LINUX_HEADERS_SRCDIR) \
#		--disable-multilib \
#		--enable-kernel=3.0.0
#	$(MAKE) -C $(notdir $@) install-headers
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-glibc-linux: $(GLIBC_SRCDIR) stamps/build-gcc-linux-stage1
#ifeq ($(MULTILIB_FLAGS),--enable-multilib)
#	$(eval $@_ARCH := $(word 4,$(subst -, ,$@)))
#	$(eval $@_ABI := $(word 5,$(subst -, ,$@)))
#else
#	$(eval $@_ARCH := )
#	$(eval $@_ABI := )
#endif
#	$(eval $@_LIBDIRSUFFIX := $(if $($@_ABI),$(shell echo $($@_ARCH) | sed 's/.*rv\([0-9]*\).*/\1/')/$($@_ABI),))
#	$(eval $@_XLEN := $(if $($@_ABI),$(shell echo $($@_ARCH) | sed 's/.*rv\([0-9]*\).*/\1/'),$(XLEN)))
#	$(eval $@_CFLAGS := $(if $($@_ABI),-march=$($@_ARCH) -mabi=$($@_ABI),))
#	$(eval $@_LIBDIROPTS := $(if $@_LIBDIRSUFFIX,--libdir=/usr/lib$($@_LIBDIRSUFFIX) libc_cv_slibdir=/lib$($@_LIBDIRSUFFIX) libc_cv_rtlddir=/lib,))
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && \
#		CC="$(GLIBC_CC_FOR_TARGET) $($@_CFLAGS)" \
#		CXX="$(GLIBC_CXX_FOR_TARGET) $($@_CFLAGS)" \
#		CFLAGS="$(CFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
#		CXXFLAGS="$(CXXFLAGS_FOR_TARGET) -g -O2 $($@_CFLAGS)" \
#		ASFLAGS="$(ASFLAGS_FOR_TARGET) $($@_CFLAGS)" \
#		$</configure \
#		--host=$(call make_tuple,linux-gnu) \
#		--prefix=/usr \
#		--disable-werror \
#		--enable-shared \
#		--enable-obsolete-rpc \
#		--with-sysroot=$(SYSROOT) \
#		$(MULTILIB_FLAGS) \
#		--enable-kernel=3.0.0 \
#		$(GLIBC_TARGET_FLAGS) \
#		$($@_LIBDIROPTS)
#	$(MAKE) -C $(notdir $@)
#	+flock $(SYSROOT)/.lock $(MAKE) -C $(notdir $@) install install_root=$(SYSROOT)
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-gcc-linux-stage1: $(GCC_SRCDIR) stamps/build-binutils-linux \
#                               stamps/build-glibc-linux-headers
#	if test -f $</contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" = "true"; then cd $< && ./contrib/download_prerequisites; fi
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && $</configure \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR) \
#		--without-headers \
#		--enable-shared \
#		--without-newlib \
#		@with_system_zlib@ \
#		--enable-threads \
#		--enable-tls \
#		--enable-languages=c \
#		--disable-libatomic \
#		--disable-libmudflap \
#		--disable-libssp \
#		--disable-libquadmath \
#		--disable-libgomp \
#		--disable-nls \
#		--disable-bootstrap \
#		--src=$(gccsrcdir) \
#		$(GCC_CHECKING_FLAGS) \
#		$(MULTILIB_FLAGS) \
#		$(WITH_ABI) \
#		$(WITH_ARCH) \
#		$(WITH_TUNE) \
#		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
#		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
#	$(MAKE) -C $(notdir $@) inhibit-libc=true all-gcc
#	$(MAKE) -C $(notdir $@) inhibit-libc=true install-gcc
#	$(MAKE) -C $(notdir $@) inhibit-libc=true all-target-libgcc
#	$(MAKE) -C $(notdir $@) inhibit-libc=true install-target-libgcc
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-gcc-linux-stage2: $(GCC_SRCDIR) stamps/build-glibc-linux \
#                               stamps/build-glibc-linux-headers
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && $</configure \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR) \
#		--with-sysroot=$(SYSROOT) \
#		@with_system_zlib@ \
#		--enable-shared \
#		--enable-tls \
#		--enable-languages=c,c++,fortran \
#		--disable-libmudflap \
#		--disable-libssp \
#		--disable-libquadmath \
#		--disable-nls \
#		--disable-bootstrap \
#		--src=$(gccsrcdir) \
#		--enable-threads \
#		--enable-tls \
#		$(GCC_CHECKING_FLAGS) \
#		$(MULTILIB_FLAGS) \
#		$(WITH_ABI) \
#		$(WITH_ARCH) \
#		$(WITH_TUNE) \
#		CFLAGS_FOR_TARGET="-O2 $(CFLAGS_FOR_TARGET)" \
#		CXXFLAGS_FOR_TARGET="-O2 $(CXXFLAGS_FOR_TARGET)"
#	$(MAKE) -C $(notdir $@)
#	$(MAKE) -C $(notdir $@) install
#	cp -a $(INSTALL_DIR)/$(LINUX_TUPLE)/lib* $(SYSROOT)
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-binutils-linux-native: $(BINUTILS_SRCDIR) stamps/build-gcc-linux-stage2 stamps/check-write-permission
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && $</configure \
#		--host=$(LINUX_TUPLE) \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR)/native \
#		$(MULTILIB_FLAGS) \
#		--disable-werror \
#		--disable-nls \
#		$(BINUTILS_NATIVE_FLAGS) \
#		--disable-gdb \
#		--disable-sim \
#		--disable-libdecnumber \
#		--disable-readline
#	$(MAKE) -C $(notdir $@)
#	$(MAKE) -C $(notdir $@) install
#	mkdir -p $(dir $@) && touch $@
#
#stamps/build-gcc-linux-native: $(GCC_SRCDIR) stamps/build-gcc-linux-stage2 stamps/build-binutils-linux-native
#	if test -f $</contrib/download_prerequisites; then cd $< && ./contrib/download_prerequisites; fi
#	rm -rf $@ $(notdir $@)
#	mkdir $(notdir $@)
#	cd $(notdir $@) && $</configure \
#		--host=$(LINUX_TUPLE) \
#		--target=$(LINUX_TUPLE) \
#		$(CONFIGURE_HOST) \
#		--prefix=$(INSTALL_DIR)/native \
#		--without-system-zlib \
#		--enable-shared \
#		--enable-tls \
#		--enable-languages=c,c++,fortran \
#		--disable-libmudflap \
#		--disable-libssp \
#		--disable-libquadmath \
#		--disable-nls \
#		--disable-bootstrap \
#                --with-native-system-header-dir=$(INSTALL_DIR)/native/include \
#		$(GCC_CHECKING_FLAGS) \
#		$(MULTILIB_FLAGS) \
#		$(WITH_ABI) \
#		$(WITH_ARCH) \
#		$(WITH_TUNE)
#	$(MAKE) -C $(notdir $@)
#	$(MAKE) -C $(notdir $@) install
#	cp -a $(INSTALL_DIR)/$(LINUX_TUPLE)/lib* $(SYSROOT)
#	mkdir -p $(dir $@) && touch $@

#
# NEWLIB
#

stamps/build-binutils-newlib: $(srcdir)/arc-binutils-gdb
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=@arc_target@ \
		--prefix=$(INSTALL_DIR) \
		--disable-python \
		@multilib_flags@ \
		@werror_flag@
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-newlib-stage1: $(srcdir)/arc-gcc stamps/build-binutils-newlib
	if test -f $</contrib/download_prerequisites && test "@NEED_GCC_EXTERNAL_LIBRARIES@" == "true"; then cd $< && ./contrib/download_prerequisites; fi
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=@arc_target@ \
		@configure_host@ \
		--prefix=$(INSTALL_DIR) \
		--disable-shared \
		--disable-threads \
		--disable-tls \
		--enable-languages=c \
		@with_system_zlib@ \
		--with-newlib \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		@gcc_checking@ \
		@werror_flag@ \
		@with_cpu@ \
		@with_fpu@ \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@) all-gcc
	$(MAKE) -C $(notdir $@) install-gcc
	mkdir -p $(dir $@) && touch $@

stamps/build-newlib: $(srcdir)/arc-newlib stamps/build-gcc-newlib-stage1
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=@arc_target@ \
		@configure_host@ \
		@multilib_flags@ \
		--prefix=$(INSTALL_DIR)
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-gcc-newlib-stage2: $(srcdir)/arc-gcc stamps/build-newlib
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--target=@arc_target@ \
		@configure_host@ \
		--prefix=$(INSTALL_DIR) \
		--disable-shared \
		--disable-threads \
		--enable-languages=c,c++ \
		@with_system_zlib@ \
		--disable-tls \
		--with-newlib \
		--with-headers=$(INSTALL_DIR)/@arc_target@/include \
		--disable-libmudflap \
		--disable-libssp \
		--disable-libquadmath \
		--disable-libgomp \
		--disable-nls \
		@gcc_checking@ \
		@multilib_flags@ \
		@werror_flag@ \
		@with_cpu@ \
		@with_fpu@ \
		--with-gnu-as \
		--with-gnu-ld
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

stamps/build-qemu: $(srcdir)/arc-qemu
	rm -rf $@ $(notdir $@)
	mkdir $(notdir $@)
	cd $(notdir $@) && $</configure \
		--prefix=${INSTALL_DIR} \
		--target-list="arc64-softmmu" \
		--enable-debug \
		--enable-debug-tcg
	$(MAKE) -C $(notdir $@)
	$(MAKE) -C $(notdir $@) install
	mkdir -p $(dir $@) && touch $@

.PHONY: check-gcc-newlib
check-gcc-newlib: stamps/build-gcc-newlib
	export PATH=$(INSTALL_DIR)/bin:$(PATH) && \
	export DEJAGNULIBS=$(srcdir)/arc-dejagnu && \
	export ARC_SYSROOT=$(SYSROOT) && \
	cd build-gcc-newlib && \
	$(MAKE) check-gcc "RUNTESTFLAGS=--target_board=arc-sim"

clean:
	rm -rf build-* $(addprefix src/,$(PACKAGES)) stamps autom4te.cache

distclean: clean
	rm -rf src

# All of the packages install themselves, so our install target does nothing.
install:
