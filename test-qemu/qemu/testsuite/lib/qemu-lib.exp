load_lib dg.exp

proc current_compiler_flags { } {
    set frames 2
    while { ![info exists flags1] } {
	set frames [expr $frames + 1]
	upvar $frames dg-extra-tool-flags flags1
    }
    upvar $frames tool_flags flags2
    return "$flags1 $flags2"
}

proc check-flags { args } {
    global compiler_flags
    global TOOL_OPTIONS
    global TEST_ALWAYS_FLAGS

    # The args are within another list; pull them out.
    set args [lindex $args 0]

    # Start the list with a dummy tool name so the list will match "*"
    # if there are no flags.
    set compiler_flags " toolname "
    append compiler_flags [current_compiler_flags]
    # If running a subset of the test suite, $TOOL_OPTIONS may not exist.
    catch {append compiler_flags " $TOOL_OPTIONS "}
    # If running a subset of the test suite, $TEST_ALWAYS_FLAGS may not exist.
    catch {append compiler_flags " $TEST_ALWAYS_FLAGS "}
    set dest [target_info name]
    if [board_info $dest exists cflags] {
	append compiler_flags "[board_info $dest cflags] "
    }
    if [board_info $dest exists multilib_flags] {
	append compiler_flags "[board_info $dest multilib_flags] "
    }

    # The next two arguments are optional.  If they were not specified,
    # use the defaults.
    if { [llength $args] == 2 } {
	lappend $args [list "*"]
    }
    if { [llength $args] == 3 } {
	lappend $args [list ""]
    }

    # If the option strings are the defaults, or the same as the
    # defaults, there is no need to call check_conditional_xfail to
    # compare them to the actual options.
    if { [string compare [lindex $args 2] "*"] == 0
	 && [string compare [lindex $args 3] "" ] == 0 } {
	set result 1
    } else {
	# The target list might be an effective-target keyword, so replace
	# the original list with "*-*-*", since we already know it matches.
	set result [check_conditional_xfail [lreplace $args 1 1 "*-*-*"]]
    }

    # Any value in this variable was left over from an earlier test.
    set compiler_flags ""

    return $result
}

proc dg-skip-if { args } {
    # Verify the number of arguments.  The last two are optional.
    set args [lreplace $args 0 0]
    if { [llength $args] < 2 || [llength $args] > 4 } {
	error "dg-skip-if 2: need 2, 3, or 4 arguments"
    }

    # Don't bother if we're already skipping the test.
    upvar dg-do-what dg-do-what
    if { [lindex ${dg-do-what} 1] == "N" } {
      return
    }

    set selector [list target [lindex $args 1]]
    if { [dg-process-target-1 $selector] == "S" } {
	if [check-flags $args] {
	    upvar dg-do-what dg-do-what
	    set dg-do-what [list [lindex ${dg-do-what} 0] "N" "P"]
	}
    }
}


proc is-effective-target-keyword { arg } {
    if { [info procs check_effective_target_${arg}] != [list] } {
	return 1
    } else {
	return 0
    }
}

# Evaluate a target triplet list within a selector expression.
# Unlike other operands, this needs to be expanded from a list to
# the same string as "target".
proc selector_list { op } {
    set selector "target [join $op]"
    set answer [ expr { [dg-process-target $selector] == "S" } ]
    verbose "selector_list: `$op' $answer" 2
    return $answer
}


# Evaluate a selector expression.
proc selector_expression { exp } {
    if { [llength $exp] >= 2
	 && [string match "any-opts" [lindex $exp 0]] } {
	set args [list "" { *-*-* } [lrange $exp 1 end] ""]
	set answer [check_conditional_xfail $args]
    } elseif { [llength $exp] >= 2
	       && [string match "no-opts" [lindex $exp 0]] } {
	set args [list "" { *-*-* } "*" [lrange $exp 1 end]]
	set answer [check_conditional_xfail $args]
    } elseif { [llength $exp] == 2 } {
	if [string match "!" [lindex $exp 0]] {
	    set op1 [lindex $exp 1]
	    set answer [expr { ! [selector_opd $op1] }]
	} else {
	    # Assume it's a list of target triplets.
	    set answer [selector_list $exp]
	}
    } elseif { [llength $exp] == 3 } {
	set op1 [lindex $exp 0]
	set opr [lindex $exp 1]
	set op2 [lindex $exp 2]
	if [string match "&&" $opr] {
	    set answer [expr { [selector_opd $op1] && [selector_opd $op2] }]
	} elseif [string match "||" $opr] {
	    set answer [expr { [selector_opd $op1] || [selector_opd $op2] }]
	} else {
	    # Assume it's a list of target triplets.
	    set answer [selector_list $exp]
	}
    } else {
	# Assume it's a list of target triplets.
	set answer [selector_list $exp]
    }

    verbose "selector_expression: `$exp' $answer" 2
    return $answer
}

proc dg-process-target-1 { args } {
    verbose "dg-process-target-1: `$args'" 2

    # Extract the 'what' keyword from the argument list.
    set selector [string trim [lindex $args 0]]
    if [regexp "^xfail " $selector] {
	set what "xfail"
    } elseif [regexp "^target " $selector] {
	set what "target"
    } else {
	error "syntax error in target selector \"$selector\""
    }

    # Extract the rest of the list, which might be a keyword.
    regsub "^${what}" $selector "" rest
    set rest [string trim $rest]

    if [is-effective-target-keyword $rest] {
	# The selector is an effective target keyword.
	if [is-effective-target $rest] {
	    return [expr { $what == "xfail" ? "F" : "S" }]
	} else {
	    return [expr { $what == "xfail" ? "P" : "N" }]
	}
    }

    if [string match "{*}" $rest] {
	if [selector_expression [lindex $rest 0]] {
	    return [expr { $what == "xfail" ? "F" : "S" }]
	} else {
	    return [expr { $what == "xfail" ? "P" : "N" }]
	}
    }

    # The selector is not an effective-target keyword, so process
    # the list of target triplets.
    return [saved-dg-process-target $selector]
}

proc profopt-get-options { src } {
    verbose "In profopt-get-options... $src\n"
    # dg-options sets a variable called dg-extra-tool-flags.
    set dg-extra-tool-flags ""

    # dg-require-* sets dg-do-what.
    upvar dg-do-what dg-do-what

    # current_compiler_flags reads tool_flags from the same stack frame
    # as dg-extra-tool-flags
    set tool_flags ""

    set tmp ""
    set tmp [dg-get-options $src]
    verbose "Options $tmp"
    foreach op $tmp {
	set cmd [lindex $op 0]
	if { ![string compare "dg-options" $cmd] \
	     || ![string compare "dg-skip-if" $cmd] \
	     || [string match "dg-require-*" $cmd]  } {
	    set status [catch "$op" errmsg]
	    if { $status != 0 } {
		perror "$src: $errmsg for \"$op\"\n"
		unresolved "$src: $errmsg for \"$op\""
		return
	    }
	} else {
	    # Ignore unrecognized dg- commands, but warn about them.
	    warning "qemu-lib.exp does not support $cmd"
	}
    }

    # Return flags to use for compiling the primary source file and for
    # linking.
    return ${dg-extra-tool-flags}
}

proc qemu_pass_fail { srcfile options } {
    global srcdir tmpdir subdir

    set fullsrcfile "$srcdir/$subdir/$srcfile"
    set test_driver "$tmpdir/[file rootname $srcfile].x"

    set dg-do-what [list "run" "" P]
    set extra_flags [profopt-get-options $fullsrcfile]
    if { [lindex ${dg-do-what} 1 ] == "N" } {
	unsupported "$fullsrcfile"
	verbose "$srcfile not supported on this target, skipping it" 3
	return
    }

    set comp_output [qemu_target_compile "$fullsrcfile" "$test_driver" "executable" "$options"]
    if { $comp_output != "" } {
	fail "$subdir/$srcfile compilation"
	unresolved "$subdir/$srcfile execution"
    } else {
	pass "$subdir/$srcfile compilation"
	set result [qemu_load $test_driver ""]
	set status [lindex $result 0]
	$status "$subdir/$srcfile execution"
    }
}

proc qemu_pass_fail_all { flag exclude_list mmu_flag mmu_list } {
    global srcdir objdir subdir runtests
    dg-init

    set linker_options_all "ldflags=-T tarc.ld"
    set linker_options_mmu "ldflags=-T tarc_mmu.ld"
    foreach fullsrcfile [lsort [glob -nocomplain $srcdir/$subdir/*.S]] {
	set srcfile "[file tail $fullsrcfile]"
	# If we're only testing specific files and this isn't one of them, skip it.
	if ![runtest_file_p $runtests $srcfile] then {
	    continue
	}

	# Exclude tests listed in exclude_list.
	if { $flag == "-x" } then {
	    if {[lsearch $exclude_list "$srcfile"] != -1} then {
		continue
	    }
	}

	# Selects which tarc file to use accordingly with the mmu_list
	set options ""
	if { $mmu_flag == "-u" } then {
	    if {[lsearch $mmu_list "$srcfile"] != -1} then {
		lappend options $linker_options_mmu
	    } else {
		lappend options $linker_options_all
	    }
	}
	qemu_pass_fail "$srcfile" "$options"
    }
    dg-finish
}
